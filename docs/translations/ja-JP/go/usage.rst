.. _usage-go:

.. go:currentpackage:: calends

.. index::
   pair: usage; Golang

Using Calends in Golang
=======================

Calends exposes a very small handful of things for use outside the library
itself. One is the :go:type:`Calends` class, documented here, which should be
the only interface users of the library ever need to touch.

Another thing Calends exposes is the :go:type:`calendars.TAI64NARUXTime` class,
used to store and manipulate the instants of time which make up a
:go:type:`Calends` instance. The rest are interfaces for extending the library's
functionality. These are covered in the :ref:`Custom Calendars in Golang
<custom-calendars-go>` section.

.. note::

	 :go:type:`Calends` objects are immutable - all methods return a new
	 :go:type:`Calends` object where they might otherwise alter the current one.
	 This is true even of the :go:func:`!Calends.Set*` methods. This has the side
	 effect of using more memory to perform manipulations than updating values on
	 an existing object would. It makes many operations safer, though, than
	 mutable objects would allow.

.. go:package:: calends

.. go:type:: Calends

   The main entry point to Calends and its functionality. :go:type:`Calends`
   objects should only be created with the :go:func:`Create` function, and never
   directly (especially given its values are all unexported ones).

Create
------

.. go:function:: func Create(value interface, calendar string, format string) (Calends, error)

   :param value: The value to parse the date(s)/time(s) from.
   :type value: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date(s)/time(s)
       with.
   :param string format: The format the date(s)/time(s) is/are expected to use.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Creates a new :go:type:`Calends` object, using ``calendar`` to select a
   calendar system, and ``format`` to parse the contents of ``value`` into the
   :go:type:`Calends` object's internal instants. The type of ``value`` can vary
   based on the calendar system itself, but generally speaking can always be a
   string.

   In any case, the value can always be a :go:type:`map[string]interface{}`,
   where the keys are any two of ``start``, ``end``, and ``duration``. If all
   three are provided, ``duration`` is ignored in favor of calculating it
   directly. If only one of the listed keys is provided, ``value`` is passed to
   the calendar system itself unchanged.

   The calendar system then converts ``value`` to a
   :go:type:`calendars.TAI64NARUXTime` instant, which the :go:type:`Calends`
   object sets to the appropriate internal value.

Read
----

.. go:function:: func (Calends) Date(calendar string, format string) (string, error)

   :param string calendar: The calendar system to format the date/time with.
   :param string format: The format the date/time is expected to be in.
   :return: The start date of the :go:type:`Calends` object
   :rtype: :go:type:`string`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Retrieves the start date of the :go:type:`Calends` object as a string. The
   value is generated by the calendar system given in ``calendar``, according to
   the format string in ``format``.

.. go:function:: func (Calends) EndDate(calendar string, format string) (string, error)

   :param string calendar: The calendar system to format the date/time with.
   :param string format: The format the date/time is expected to be in.
   :return: The end date of the :go:type:`Calends` object
   :rtype: :go:type:`string`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Retrieves the end date of the :go:type:`Calends` object as a string. The
   value is generated by the calendar system given in ``calendar``, according to
   the format string in ``format``.

.. go:function:: func (Calends) Duration() Float

   :return: The duration of the :go:type:`Calends` object
   :rtype: :go:type:`math/big.(*Float)`

   Retrieves the duration of the :go:type:`Calends` object as an
   arbitrary-precision floating point number. This value will be ``0`` if the
   :go:type:`Calends` object is an instant.

Update
------

.. go:function:: func (Calends) SetDate(stamp interface, calendar string, format string) (Calends, error)

   :param value: The value to parse the date/time from.
   :type value: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :param string format: The format the date/time is expected to use.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Sets the start date of a :go:type:`Calends` object, based on the
   :go:type:`Calends` object's current value. The inputs are the same as for
   :go:func:`Create`, above, except the string → value map option isn't
   available, since you're already specifically setting the start value
   explicitly.

.. go:function:: func (Calends) SetEndDate(stamp interface, calendar string, format string) (Calends, error)

   :param value: The value to parse the date/time from.
   :type value: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :param string format: The format the date/time is expected to use.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Sets the end date of a :go:type:`Calends` object, based on the
   :go:type:`Calends` object's current value. The inputs are the same as for
   :go:func:`Create`, above, except the string → value map option isn't
   available, since you're already specifically setting the end value
   explicitly.

.. go:function:: func (Calends) SetDuration(duration interface, calendar string) (Calends, error)

   :param duration: The value to parse the new duration from.
   :type duration: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Sets the duration of a :go:type:`Calends` object, by adjusting its end point,
   and using the current start point as an anchor. The ``duration`` value is
   interpreted by the calendar system given in ``calendar``, so is subject to
   any of its rules.

.. go:function:: func (Calends) SetDurationFromEnd(duration interface, calendar string) (Calends, error)

   :param duration: The value to parse the new duration from.
   :type duration: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Sets the duration of a :go:type:`Calends` object, by adjusting its start
   point, and using the current end point as an anchor. The ``duration`` value
   is interpreted by the calendar system given in ``calendar``, so is subject to
   any of its rules.

Manipulate
----------

.. go:function:: func (Calends) Add(offset interface, calendar string) (Calends, error)

   :param offset: The value to parse the offset from.
   :type offset: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Increases the end date of the :go:type:`Calends` object's current value by
   ``offset``, as interpreted by the calendar system given in ``calendar``.

.. go:function:: func (Calends) AddFromEnd(offset interface, calendar string) (Calends, error)

   :param offset: The value to parse the offset from.
   :type offset: :go:type:`interface{}`
   :param string calendar: The calendar system to parse the date/time with.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Increases the start date of the :go:type:`Calends` object's current value by
   ``offset``, as interpreted by the calendar system given in ``calendar``.

.. go:function:: func (Calends) Subtract(offset interface, calendar string) (Calends, error)

  :param offset: The value to parse the offset from.
  :type offset: :go:type:`interface{}`
  :param string calendar: The calendar system to parse the date/time with.
  :return: A new :go:type:`Calends` object
  :rtype: :go:type:`Calends`
  :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
  :rtype: :go:type:`error` or :go:type:`nil`

  Works the same as ``Add``, except it decreases the start date, rather than
  increasing it.

.. go:function:: func (Calends) SubtractFromEnd(offset interface, calendar string) (Calends, error)

  :param offset: The value to parse the offset from.
  :type offset: :go:type:`interface{}`
  :param string calendar: The calendar system to parse the date/time with.
  :return: A new :go:type:`Calends` object
  :rtype: :go:type:`Calends`
  :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
  :rtype: :go:type:`error` or :go:type:`nil`

  Works the same as ``AddFromEnd``, except it decreases the end date, rather
  than increasing it.

.. go:function:: func (Calends) Next(offset interface, calendar string) (Calends, error)

  :param offset: The value to parse the offset from.
  :type offset: :go:type:`interface{}`
  :param string calendar: The calendar system to parse the date/time with.
  :return: A new :go:type:`Calends` object
  :rtype: :go:type:`Calends`
  :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
  :rtype: :go:type:`error` or :go:type:`nil`

  Returns a :go:type:`Calends` object of ``offset`` duration (as interpreted by
  the calendar system given in ``calendar``), which abuts the :go:type:`Calends`
  object's current value. If ``offset`` is empty, ``calendar`` is ignored, and
  the current object's duration is used instead.

.. go:function:: func (Calends) Previous(offset interface, calendar string) (Calends, error)

  :param offset: The value to parse the offset from.
  :type offset: :go:type:`interface{}`
  :param string calendar: The calendar system to parse the date/time with.
  :return: A new :go:type:`Calends` object
  :rtype: :go:type:`Calends`
  :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
  :rtype: :go:type:`error` or :go:type:`nil`

  Returns a :go:type:`Calends` object of ``offset`` duration (as interpreted by
  the calendar system given in ``calendar``), which abuts the :go:type:`Calends`
  object's current value. If ``offset`` is empty, ``calendar`` is ignored, and
  the current object's duration is used instead.

Combine
-------

.. go:function:: func (Calends) Merge(c2 Calends) (Calends, error)

   :param Calends c2: The :go:type:`Calends` object to merge.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Returns a :go:type:`Calends` object spanning from the earliest start date to
   the latest end date between the current :go:type:`Calends` object and ``c2``.

.. go:function:: func (Calends) Intersect(c2 Calends) (Calends, error)

   :param Calends c2: The :go:type:`Calends` object to intersect.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Returns a :go:type:`Calends` object spanning the overlap between the current
   :go:type:`Calends` object and ``c2``. If the current object and ``c2`` don't
   overlap, returns an error.

.. go:function:: func (Calends) Gap(c2 Calends) (Calends, error)

   :param Calends c2: The :go:type:`Calends` object to gap.
   :return: A new :go:type:`Calends` object
   :rtype: :go:type:`Calends`
   :return: :go:type:`error` when an error occurs; :go:type:`nil` otherwise
   :rtype: :go:type:`error` or :go:type:`nil`

   Returns a :go:type:`Calends` object spanning the gap between the current
   :go:type:`Calends` object and ``c2``. If the current object and ``c2``
   overlap (and there is, therefore, no gap to return), returns an error.

Compare
-------

.. go:function:: func (Calends) Difference(c2 Calends, mode string) Float

   :param Calends c2: The :go:type:`Calends` object to compare.
   :param string mode: The comparison mode.
   :return: The difference, as an arbitrary-precision floating point number
   :rtype: :go:type:`math/big.Float`

   Returns the difference of the current :go:type:`Calends` object minus ``c2``,
   using ``mode`` to select which values to use in the calculation. Valid
   ``mode``\ s include:

   - ``start`` - use the start date of both the current object and ``c2``
   - ``duration`` - use the duration of both the current object and ``c2``
   - ``end`` - use the end date of both the current object and ``c2``
   - ``start-end`` - use the start of the current object, and the end of ``c2``
   - ``end-start`` - use the end of the current object, and the start of ``c2``

.. go:function:: func (Calends) Compare(c2 Calends, mode string) int

   :param Calends c2: The :go:type:`Calends` object to compare.
   :param string mode: The comparison mode.
   :return: A standard comparison result
   :rtype: :go:type:`int`

   Returns ``-1`` if the current :go:type:`Calends` object is less than ``c2``,
   ``0`` if they are equal, and ``1`` if the current object is greater than
   ``c2``, using ``mode`` to select which values to use in the comparison. Valid
   ``mode``\ s are the same as for :go:func:`(Calends) Difference`, above.

.. go:function:: func (Calends) Contains(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the current :go:type:`Calends` object contains all of ``c2``.

.. go:function:: func (Calends) Overlaps(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the current :go:type:`Calends` object overlaps with ``c2``.

.. go:function:: func (Calends) Abuts(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the current :go:type:`Calends` object abuts ``c2`` (that is,
   whether one begins at the same instant the other ends).

.. go:function:: func (Calends) IsSame(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the current :go:type:`Calends` object covers the same span of
   time as ``c2``.

.. go:function:: func (Calends) IsShorter(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the duration of the current :go:type:`Calends` object  and ``c2``.

.. go:function:: func (Calends) IsSameDuration(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the duration of the current :go:type:`Calends` object  and ``c2``.

.. go:function:: func (Calends) IsLonger(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the duration of the current :go:type:`Calends` object  and ``c2``.

.. go:function:: func (Calends) IsBefore(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the entirety of the current :go:type:`Calends` object with the start
   date of ``c2``.

.. go:function:: func (Calends) StartsBefore(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the start date of the current :go:type:`Calends` object with the
   start date of ``c2``.

.. go:function:: func (Calends) EndsBefore(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the end date of the current :go:type:`Calends` object with the start
   date of ``c2``.

.. go:function:: func (Calends) IsDuring(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the entirety of the current :go:type:`Calends` object lies
   between the start and end dates of ``c2``.

.. go:function:: func (Calends) StartsDuring(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the start date of the current :go:type:`Calends` object lies
   between the start and end dates of ``c2``.

.. go:function:: func (Calends) EndsDuring(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Checks whether the end date of the current :go:type:`Calends` object lies
   between the start and end dates of ``c2``.

.. go:function:: func (Calends) IsAfter(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the entirety of the current :go:type:`Calends` object with the end
   date of ``c2``.

.. go:function:: func (Calends) StartsAfter(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the start date of the current :go:type:`Calends` object with the end
   date of ``c2``.

.. go:function:: func (Calends) EndsAfter(c2 Calends) bool

   :param Calends c2: The :go:type:`Calends` object to compare.
   :return: The result of the comparison
   :rtype: :go:type:`bool`

   Compares the end date of the current :go:type:`Calends` object with the end
   date of ``c2``.

Export
------

.. go:function:: func (Calends) String() string

   :return: The string representation of the current value.
   :rtype: :go:type:`string`

   Implements the :go:type:`fmt.Stringer` interface.

.. go:function:: func (Calends) MarshalText() ([]byte, error)

   :return: A byte slice containing the marshalled text.
   :rtype: :go:type:`[]byte`
   :return: Any error that occurs.
   :rtype: :go:type:`error`

   Implements the :go:type:`encoding.TextMarshaler` interface.

.. go:function:: func (*Calends) UnmarshalText(in []byte) error

   :param in: A byte slice containing the marshalled text.
   :type in: :go:type:`[]byte`
   :return: Any error that occurs.
   :rtype: :go:type:`error`

   Implements the :go:type:`encoding.TextUnmarshaler` interface.

.. go:function:: func (Calends) MarshalJSON() ([]byte, error)

   :return: A byte slice containing the marshalled JSON.
   :rtype: :go:type:`[]byte`
   :return: Any error that occurs.
   :rtype: :go:type:`error`

   Implements the :go:type:`encoding/json.Marshaler` interface.

.. go:function:: func (*Calends) UnmarshalJSON(in []byte) error

   :param in: A byte slice containing the marshalled JSON.
   :type in: :go:type:`[]byte`
   :return: Any error that occurs.
   :rtype: :go:type:`error`

   Implements the :go:type:`encoding/json.Unmarshaler` interface.
