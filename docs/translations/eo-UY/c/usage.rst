.. _usage-c:

.. index::
   pair: usage; C/C++

Using Calends in C/C++
======================

Calends exposes a very small handful of things for use outside the library
itself. Documented here are the parts most users will interact with.

Calends also exposes functions and types for extending the library's
functionality. These are covered in the :ref:`Custom Calendars in C/C++
<custom-calendars-c>` section.

.. note::

	 Because C doesn't support objects, the library returns an identifier instead
	 of an actual ``Calends`` value, keeping a reference to the internal
	 ``Calends`` object in the Golang portions of the process space. This
	 identifier is specific to the process in which it is generated, and is
	 therefore only useful within that process itself. To save the value for
	 later, use one of the marshalling functions documented below, and then the
	 corresponding unmarshalling function to retrieve it elsewhere.

Create
------

.. c:function:: long long unsigned int Calends_create_string(char* value, char* calendar, char* format)
                long long unsigned int Calends_create_string_range(char* start, char* end, char* calendar, char* format)
                long long unsigned int Calends_create_string_start_period(char* start, char* duration, char* calendar, char* format)
                long long unsigned int Calends_create_string_end_period(char* duration, char* end, char* calendar, char* format)
                long long unsigned int Calends_create_long_long(long long int value, char* calendar, char* format)
                long long unsigned int Calends_create_long_long_range(long long int start, long long int end, char* calendar, char* format)
                long long unsigned int Calends_create_long_long_start_period(long long int start, long long int duration, char* calendar, char* format)
                long long unsigned int Calends_create_long_long_end_period(long long int duration, long long int end, char* calendar, char* format)
                long long unsigned int Calends_create_double(double value, char* calendar, char* format)
                long long unsigned int Calends_create_double_range(double start, double end, char* calendar, char* format)
                long long unsigned int Calends_create_double_start_period(double start, double duration, char* calendar, char* format)
                long long unsigned int Calends_create_double_end_period(double duration, double end, char* calendar, char* format)

   :param value: The value to parse the date/time from.
   :type value: :c:type:`char*` or :c:type:`long long int` or :c:type:`double`
   :param start: The value to parse the start date/time from.
   :type start: :c:type:`char*` or :c:type:`long long int` or :c:type:`double`
   :param duration: The value to parse the duration from.
   :type duration: :c:type:`char*` or :c:type:`long long int` or
                   :c:type:`double`
   :param end: The value to parse the end date/time from.
   :type end: :c:type:`char*` or :c:type:`long long int` or :c:type:`double`
   :param calendar: The calendar system to parse the date(s)/time(s) with.
   :type calendar: :c:type:`char*`
   :param format: The format the date(s)/time(s) is/are expected to use.
   :type format: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Creates a new ``Calends`` object identifier, using :c:data:`calendar` to
   select a calendar system, and :c:data:`format` to parse the contents of
   :c:data:`value`, :c:data:`start`, :c:data:`end`, and/or :c:data:`duration`
   into the ``Calends`` object's internal instants.

Read
----

.. c:function:: char* Calends_date(long long unsigned int c, char* calendar, char* format)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param calendar: The calendar system to format the date/time with.
   :type calendar: :c:type:`char*`
   :param format: The format the date/time is expected to be in.
   :type format: :c:type:`char*`
   :return: The start date of the ``Calends`` object
   :rtype: :c:type:`char*`

   Retrieves the start date of the ``Calends`` object as a string. The value is
   generated by the calendar system given in :c:data:`calendar`, according to
   the format string in :c:data:`format`.

.. c:function:: char* Calends_end_date(long long unsigned int c, char* calendar, char* format)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param calendar: The calendar system to format the date/time with.
   :type calendar: :c:type:`char*`
   :param format: The format the date/time is expected to be in.
   :type format: :c:type:`char*`
   :return: The end date of the ``Calends`` object
   :rtype: :c:type:`char*`

   Retrieves the end date of the ``Calends`` object as a string. The value is
   generated by the calendar system given in :c:data:`calendar`, according to
   the format string in :c:data:`format`.

.. c:function:: char* Calends_duration(long long unsigned int c)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :return: The duration of the ``Calends`` object
   :rtype: :c:type:`char*`

   Retrieves the duration of the ``Calends`` object as a string. This value will
   be ``0`` if the ``Calends`` object is an instant.

Update
------

.. c:function:: long long unsigned int Calends_with_date_string(long long unsigned int c, char* value, char* calendar, char* format)
                long long unsigned int Calends_with_date_long_long(long long unsigned int c, long long int value, char* calendar, char* format)
                long long unsigned int Calends_with_date_double(long long unsigned int c, double value, char* calendar, char* format)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param value: The value to parse the date/time from.
   :type value: :c:type:`char*` or :c:type:`long long int` or :c:type:`double`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :param format: The format the date/time is expected to use.
   :type format: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Sets the start date of a ``Calends`` object, based on the ``Calends``
   object's current value. The inputs are the same as for the
   :c:func:`!Calends_create_{type}` functions, above.

.. c:function:: long long unsigned int Calends_with_end_date_string(long long unsigned int c, char* value, char* calendar, char* format)
                long long unsigned int Calends_with_end_date_long_long(long long unsigned int c, long long int value, char* calendar, char* format)
                long long unsigned int Calends_with_end_date_double(long long unsigned int c, double value, char* calendar, char* format)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param value: The value to parse the date/time from.
   :type value: :c:type:`char*` or :c:type:`long long int` or :c:type:`double`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :param format: The format the date/time is expected to use.
   :type format: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Sets the end date of a ``Calends`` object, based on the ``Calends`` object's
   current value. The inputs are the same as for the
   :c:func:`!Calends_create_{type}` functions, above.

.. c:function:: long long unsigned int Calends_with_duration_string(long long unsigned int c, char* duration, char* calendar)
                long long unsigned int Calends_with_duration_long_long(long long unsigned int c, long long int duration, char* calendar)
                long long unsigned int Calends_with_duration_double(long long unsigned int c, double duration, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param duration: The value to parse the new duration from.
   :type duration: :c:type:`char*` or :c:type:`long long int` or
                   :c:type:`double`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Sets the duration of a ``Calends`` object, by adjusting its end point, and
   using the current start point as an anchor. The :c:data:`duration` value is
   interpreted by the calendar system given in :c:data:`calendar`, so is subject
   to any of its rules.

.. c:function:: long long unsigned int Calends_with_duration_from_end_string(long long unsigned int c, char* duration, char* calendar)
                long long unsigned int Calends_with_duration_from_end_long_long(long long unsigned int c, long long int duration, char* calendar)
                long long unsigned int Calends_with_duration_from_end_double(long long unsigned int c, double duration, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param duration: The value to parse the new duration from.
   :type duration: :c:type:`char*` or :c:type:`long long int` or
                   :c:type:`double`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Sets the duration of a ``Calends`` object, by adjusting its start point, and
   using the current end point as an anchor. The :c:data:`duration` value is
   interpreted by the calendar system given in :c:data:`calendar`, so is subject
   to any of its rules.

Destroy
-------

.. c:function:: void Calends_release(long long unsigned int c)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`

   Releases an internal ``Calends`` object, freeing its associated memory. Since
   the memory used in this case is kept within the Golang portion of the process
   space, we don't have access to free that memory using more conventional C/C++
   methods, so this function offers that functionality instead.

Manipulate
----------

.. c:function:: long long unsigned int Calends_add_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_add_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_add_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Increases the end date of the ``Calends`` object's current value by
   :c:data:`offset`, as interpreted by the calendar system given in
   :c:data:`calendar`.

.. c:function:: long long unsigned int Calends_add_from_end_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_add_from_end_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_add_from_end_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Increases the start date of the ``Calends`` object's current value by
   :c:data:`offset`, as interpreted by the calendar system given in
   :c:data:`calendar`.

.. c:function:: long long unsigned int Calends_subtract_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_subtract_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_subtract_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Works the same as :c:func:`!Calends_add_{type}`, except it decreases the
   start date, rather than increasing it.

.. c:function:: long long unsigned int Calends_subtract_from_end_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_subtract_from_end_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_subtract_from_end_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Works the same as :c:func:`!Calends_add_from_end_{type}`, except it decreases
   the end date, rather than increasing it.

.. c:function:: long long unsigned int Calends_next_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_next_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_next_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Returns the identifier of a ``Calends`` object of :c:data:`offset` duration
   (as interpreted by the calendar system given in :c:data:`calendar`), which
   abuts the current ``Calends`` object's start value. If :c:data:`offset` is
   empty, :c:data:`calendar` is ignored, and the current object's duration is
   used instead.

.. c:function:: long long unsigned int Calends_previous_string(long long unsigned int c, char* offset, char* calendar)
                long long unsigned int Calends_previous_long_long(long long unsigned int c, long long int offset, char* calendar)
                long long unsigned int Calends_previous_double(long long unsigned int c, double offset, char* calendar)

   :param c: The identifier of the current ``Calends`` object.
   :type c: :c:type:`long long unsigned int`
   :param offset: The value to parse the offset from.
   :type offset: :c:type:`char*`
   :param calendar: The calendar system to parse the date/time with.
   :type calendar: :c:type:`char*`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Returns the identifier of a ``Calends`` object of :c:data:`offset` duration
   (as interpreted by the calendar system given in :c:data:`calendar`), which
   abuts the current ``Calends`` object's end value. If :c:data:`offset` is
   empty, :c:data:`calendar` is ignored, and the current object's duration is
   used instead.

Combine
-------

.. c:function:: long long unsigned int Calends_merge(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to merge.
   :type c2: :c:type:`long long unsigned int`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Returns a ``Calends`` object spanning from the earliest start date to the
   latest end date between :c:data:`c1` and :c:data:`c2`.

.. c:function:: long long unsigned int Calends_intersect(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to intersect.
   :type c2: :c:type:`long long unsigned int`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Returns a ``Calends`` object spanning the overlap between :c:data:`c1` and
   :c:data:`c2`. If :c:data:`c1` and :c:data:`c2` don't overlap, returns an
   error.

.. c:function:: long long unsigned int Calends_gap(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to gap.
   :type c2: :c:type:`long long unsigned int`
   :return: A new ``Calends`` object identifier
   :rtype: :c:type:`long long unsigned int`

   Returns a ``Calends`` object spanning the gap between :c:data:`c1` and
   :c:data:`c2`. If :c:data:`c1` and :c:data:`c2` overlap (and there is,
   therefore, no gap to return), returns an error.

Compare
-------

.. c:function:: char* Calends_difference(long long unsigned int c1, long long unsigned int c2, char* mode)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :param mode: The comparison mode.
   :type mode: :c:type:`char*`
   :return: The difference, as a decimal string
   :rtype: :c:type:`char*`

   Returns the difference of :c:data:`c1` minus :c:data:`c2`, using
   :c:data:`mode` to select which values to use in the calculation. Valid
   :c:data:`mode`\ s include:

   - ``"start"`` - use the start date of both :c:data:`c1` and :c:data:`c2`
   - ``"duration"`` - use the duration of both :c:data:`c1` and :c:data:`c2`
   - ``"end"`` - use the end date of both :c:data:`c1` and :c:data:`c2`
   - ``"start-end"`` - use the start of :c:data:`c1`, and the end of
     :c:data:`c2`
   - ``"end-start"`` - use the end of :c:data:`c1`, and the start of
     :c:data:`c2`

.. c:function:: signed char Calends_compare(long long unsigned int c1, long long unsigned int c2, char* mode)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :param mode: The comparison mode.
   :type mode: :c:type:`char*`
   :return: A standard comparison result
   :rtype: :c:data:`signed char`

   Returns ``-1`` if :c:data:`c1` is less than :c:data:`c2`, ``0`` if they are
   equal, and ``1`` if :c:data:`c1` is greater than :c:data:`c2`, using
   :c:data:`mode` to select which values to use in the comparison. Valid
   :c:data:`mode`\ s are the same as for :c:func:`Calends_difference`, above.

.. c:function:: signed char Calends_contains(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether :c:data:`c1` contains all of :c:data:`c2`.

.. c:function:: signed char Calends_overlaps(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether :c:data:`c1` overlaps with :c:data:`c2`.

.. c:function:: signed char Calends_abuts(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether :c:data:`c1` abuts :c:data:`c2` (that is, whether one begins
   at the same instant the other ends).

.. c:function:: signed char Calends_is_same(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether :c:data:`c1` covers the same span of time as :c:data:`c2`.

.. c:function:: signed char Calends_is_shorter(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the duration of :c:data:`c1` and :c:data:`c2`.

.. c:function:: signed char Calends_is_same_duration(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the duration of :c:data:`c1` and :c:data:`c2`.

.. c:function:: signed char Calends_is_longer(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the duration of :c:data:`c1` and :c:data:`c2`.

.. c:function:: signed char Calends_is_before(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the entirety of :c:data:`c1` with the start date of :c:data:`c2`.

.. c:function:: signed char Calends_starts_before(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the start date of :c:data:`c1` with the start date of :c:data:`c2`.

.. c:function:: signed char Calends_ends_before(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the end date of :c:data:`c1` with the start date of :c:data:`c2`.

.. c:function:: signed char Calends_is_during(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether the entirety of :c:data:`c1` lies between the start and end
   dates of :c:data:`c2`.

.. c:function:: signed char Calends_starts_during(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether the start date of :c:data:`c1` lies between the start and end
   dates of :c:data:`c2`.

.. c:function:: signed char Calends_ends_during(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Checks whether the end date of :c:data:`c1` lies between the start and end
   dates of :c:data:`c2`.

.. c:function:: signed char Calends_is_after(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the entirety of :c:data:`c1` with the end date of :c:data:`c2`.

.. c:function:: signed char Calends_starts_after(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the start date of :c:data:`c1` with the end date of :c:data:`c2`.

.. c:function:: signed char Calends_ends_after(long long unsigned int c1, long long unsigned int c2)

   :param c1: The identifier of the current ``Calends`` object.
   :type c1: :c:type:`long long unsigned int`
   :param c2: The identifier of the ``Calends`` object to compare.
   :type c2: :c:type:`long long unsigned int`
   :return: The result of the comparison
   :rtype: :c:type:`signed char`

   Compares the end date of :c:data:`c1` with the end date of :c:data:`c2`.

Export
------

.. c:function:: char* Calends_string(long long unsigned int c)

   :param c: The :go:type:`Calends` object to convert.
   :type c: :c:type:`long long unsigned int`
   :return: The string representation of the current value.
   :rtype: :c:type:`char*`

   Converts the value of :c:data:`c` to a string.

.. c:function:: char* Calends_encode_text(long long unsigned int c)

   :param c: The :go:type:`Calends` object to encode.
   :type c: :c:type:`long long unsigned int`
   :return: The encoded representation of the current value.
   :rtype: :c:type:`char*`

   Encodes the value of :c:data:`c` as text, for external storage.

.. c:function:: long long unsigned int Calends_decode_text(char* in)

   :param in: The encoded representation of a :go:type:`Calends` value.
   :type in: :c:type:`char*`
   :return: The decoded :go:type:`Calends` object's identifier.
   :rtype: :c:type:`long long unsigned int`

   Decodes the value of :c:data:`in` to a new :c:type:`Calends` object.

.. c:function:: char* Calends_encode_json(long long unsigned int c)

   :param c: The :go:type:`Calends` object to encode.
   :type c: :c:type:`long long unsigned int`
   :return: The encoded representation of the current value.
   :rtype: :c:type:`char*`

   Encodes the value of :c:data:`c` as JSON, for external communication.

.. c:function:: long long unsigned int Calends_decode_json(char* in)

   :param in: The encoded representation of a :go:type:`Calends` value.
   :type in: :c:type:`char*`
   :return: The decoded :go:type:`Calends` object's identifier.
   :rtype: :c:type:`long long unsigned int`

   Decodes the value of :c:data:`in` to a new :c:type:`Calends` object.

Error Handling
--------------

.. c:function:: void Calends_register_panic_handler(Calends_panic_handler callback)

   :param callback: A panic handler function.
   :type callback: :c:type:`void function(char*)`

   When errors happen, Go normally returns the error as an additional return
   value. Since most programming languages don't support this, the C/C++
   interface to the library instead relies on a Golang feature called a
   ``panic``, which is a lot like an exception in many other languages. This
   function allows users to register a callback function of their own to handle
   the error conditions which might come up. :c:data:`callback` should accept a
   :c:type:`char*` containing the error message supplied by the library, and
   return nothing.

.. TODO ::
   Actually add C++ support, because the C namespace support is ... not great.
