.. _usage-php:

.. index::
   pair: usage; PHP

.. php:namespace:: Calends

Using Calends in PHP
====================

Calends exposes a very small handful of things for use outside the library
itself. One is the :php:class:`Calends` class, documented here, which should be
the only interface users of the library ever need to touch.

Another thing Calends exposes is the :php:class:`TAITime` class, used to store
and manipulate the instants of time which make up a :php:class:`Calends`
instance. The rest are interfaces for extending the library's functionality.
These are covered in the :ref:`Custom Calendars in PHP <custom-calendars-php>`
section.

.. note::

	 :php:class:`Calends` objects are immutable - all methods return a new
	 :php:class:`Calends` object where they might otherwise alter the current one.
	 This has the side effect of using more memory to perform manipulations than
	 updating values on an existing object would. It makes many operations safer,
	 though, than mutable objects would allow.

.. php:class:: Calends

   The main entry point to Calends and its functionality. :php:class:`Calends`
   objects can only be created with the :php:meth:`Calends\\Calends::create`
   function, and not directly. :php:class:`Calends` *does* implement the
   :php:class:`Serializable` interface, though, so it's safe to
   :php:func:`serialize`\ /\ :php:func:`unserialize` instances if you want.

Create
------

.. php:staticmethod:: Calends::create($value, $calendar, $format)

   :param mixed $value: The value to parse the date(s)/time(s) from.
   :param string $calendar: The calendar system to parse the date(s)/time(s)
       with.
   :param string $format: The format the date(s)/time(s) is/are expected to use.
   :return: A new :php:class:`Calends` object
   :rtype: :php:class:`Calends`
   :throws CalendsException: when an error occurs

   Creates a new :php:class:`Calends` object, using ``$calendar`` to select a
   calendar system, and ``$format`` to parse the contents of ``$value`` into the
   :php:class:`Calends` object's internal instants. The type of ``$value`` can
   vary based on the calendar system itself, but generally speaking can always
   be a string.

   In any case, the value can always be an associative array, where the keys are
   any two of ``start``, ``end``, and ``duration``. If all three are provided,
   ``duration`` is ignored in favor of calculating it directly.

   The calendar system then converts ``$value`` to a :php:class:`TAITime`
   instant, which the :php:class:`Calends` object sets to the appropriate
   internal value.

Read
----

   .. php:method:: date($calendar, $format)

      :param string $calendar: The calendar system to format the date/time with.
      :param string $format: The format the date/time is expected to be in.
      :return: The start date of the :php:class:`Calends` object
      :rtype: string
      :throws CalendsException: when an error occurs

      Retrieves the start date of the :php:class:`Calends` object as a string.
      The value is generated by the calendar system given in ``$calendar``,
      according to the format string in ``$format``.

   .. php:method:: endDate($calendar, $format)

      :param string $calendar: The calendar system to format the date/time with.
      :param string $format: The format the date/time is expected to be in.
      :return: The end date of the :php:class:`Calends` object
      :rtype: string
      :throws CalendsException: when an error occurs

      Retrieves the end date of the :php:class:`Calends` object as a string. The
      value is generated by the calendar system given in ``$calendar``,
      according to the format string in ``$format``.

   .. php:method:: duration()

      :return: The duration of the :php:class:`Calends` object
      :rtype: string

      Retrieves the duration of the :php:class:`Calends` object as a decimal
      string. This value will be ``0`` if the :php:class:`Calends` object is an
      instant.

Update
------

   .. php:method:: withDate($value, $calendar, $format)

      :param mixed $value: The value to parse the date/time from.
      :param string $calendar: The calendar system to parse the date/time with.
      :param string $format: The format the date/time is expected to use.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object with a start date based on the
      current :php:class:`Calends` object's value. The inputs are the same as
      for :php:meth:`Calends\\Calends::create`, above, except the string → value
      map option isn't available, since you're already specifically setting the
      start value explicitly.

   .. php:method:: withEndDate($value, $calendar, $format)

      :param mixed $value: The value to parse the date/time from.
      :param string $calendar: The calendar system to parse the date/time with.
      :param string $format: The format the date/time is expected to use.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object with an end date based on the
      current :php:class:`Calends` object's value. The inputs are the same as
      for :php:meth:`Calends\\Calends::create`, above, except the string → value
      map option isn't available, since you're already specifically setting the
      end value explicitly.

   .. php:method:: withDuration($duration, $calendar)

      :param string $duration: The value to parse the new duration from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object with a duration set by adjusting the
      current :php:class:`Calends` object's end point, and using its start point
      as an anchor. The ``$duration`` value is interpreted by the calendar
      system given in ``$calendar``, so is subject to any of its rules.

   .. php:method:: withDurationFromEnd($duration, $calendar)

      :param string $duration: The value to parse the new duration from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object with a duration set by adjusting the
      current :php:class:`Calends` object's start point, and using its end point
      as an anchor. The ``$duration`` value is interpreted by the calendar
      system given in ``$calendar``, so is subject to any of its rules.

Manipulate
----------

   .. php:method:: add($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Increases the end date of the :php:class:`Calends` object's current value
      by ``$offset``, as interpreted by the calendar system given in
      ``$calendar``, and returns a new :php:class:`Calends` object with the
      result.

   .. php:method:: addFromEnd($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Increases the start date of the :php:class:`Calends` object's current
      value by ``$offset``, as interpreted by the calendar system given in
      ``$calendar``, and returns a new :php:class:`Calends` object with the
      result.

   .. php:method:: subtract($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Works the same as :php:meth:`add`, except it decreases the start date,
      rather than increasing it.

   .. php:method:: subtractFromEnd($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Works the same as :php:meth:`addFromEnd`, except it decreases the end
      date, rather than increasing it.

   .. php:method:: next($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object of ``$offset`` duration (as
      interpreted by the calendar system given in ``$calendar``), which abuts
      the current :php:class:`Calends` object's value. If ``$offset`` is empty,
      ``$calendar`` is ignored, and the current object's duration is used
      instead.

   .. php:method:: previous($offset, $calendar)

      :param string $offset: The value to parse the offset from.
      :param string $calendar: The calendar system to parse the date/time with.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object of ``$offset`` duration (as
      interpreted by the calendar system given in ``$calendar``), which abuts
      the current :php:class:`Calends` object's value. If ``$offset`` is empty,
      ``$calendar`` is ignored, and the current object's duration is used
      instead.

Combine
-------

   .. php:method:: merge($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to merge.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object spanning from the earliest start
      date to the latest end date between the current :php:class:`Calends`
      object and ``$c2``.

   .. php:method:: intersect($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to intersect.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object spanning the overlap between the
      current :php:class:`Calends` object and ``$c2``. If the current object and
      ``$c2`` don't overlap, throws an error.

   .. php:method:: gap($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to gap.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :php:class:`Calends` object spanning the gap between the current
      :php:class:`Calends` object and ``$c2``. If the current object and ``$c2``
      overlap (and there is, therefore, no gap to return), throws an error.

Compare
-------

   .. php:method:: difference($c2, $mode)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :param string $mode: The comparison mode.
      :return: The difference, as a decimal string
      :rtype: string

      Returns the difference of the current :php:class:`Calends` object minus
      ``$c2``, using ``$mode`` to select which values to use in the calculation.
      Valid ``$mode``\ s include:

      - ``start`` - use the start date of both the current object and ``$c2``
      - ``duration`` - use the duration of both the current object and ``$c2``
      - ``end`` - use the end date of both the current object and ``$c2``
      - ``start-end`` - use the start of the current object, and the end of
        ``$c2``
      - ``end-start`` - use the end of the current object, and the start of
        ``$c2``

   .. php:method:: compare($c2, $mode)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :param string $mode: The comparison mode.
      :return: A standard comparison result
      :rtype: int

      Returns ``-1`` if the current :php:class:`Calends` object is less than
      ``$c2``, ``0`` if they are equal, and ``1`` if the current object is
      greater than ``$c2``, using ``$mode`` to select which values to use in the
      comparison. Valid ``$mode``\ s are the same as for
      :php:meth:`Calends\\Calends::difference`, above.

   .. php:method:: contains($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :php:class:`Calends` object contains all of
      ``$c2``.

   .. php:method:: overlaps($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :php:class:`Calends` object overlaps with
      ``$c2``.

   .. php:method:: abuts($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :php:class:`Calends` object abuts ``$c2`` (that
      is, whether one begins at the same instant the other ends).

   .. php:method:: isSame($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :php:class:`Calends` object covers the same
      span of time as ``$c2``.

   .. php:method:: isShorter($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :php:class:`Calends` object  and
      ``$c2``.

   .. php:method:: isSameDuration($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :php:class:`Calends` object  and
      ``$c2``.

   .. php:method:: isLonger($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :php:class:`Calends` object  and
      ``$c2``.

   .. php:method:: isBefore($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the entirety of the current :php:class:`Calends` object with the
      start date of ``$c2``.

   .. php:method:: startsBefore($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the start date of the current :php:class:`Calends` object with
      the start date of ``$c2``.

   .. php:method:: endsBefore($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the end date of the current :php:class:`Calends` object with the
      start date of ``$c2``.

   .. php:method:: isDuring($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the entirety of the current :php:class:`Calends` object
      lies between the start and end dates of ``$c2``.

   .. php:method:: startsDuring($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the start date of the current :php:class:`Calends` object
      lies between the start and end dates of ``$c2``.

   .. php:method:: endsDuring($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the end date of the current :php:class:`Calends` object
      lies between the start and end dates of ``$c2``.

   .. php:method:: isAfter($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the entirety of the current :php:class:`Calends` object with the
      end date of ``$c2``.

   .. php:method:: startsAfter($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the start date of the current :php:class:`Calends` object with
      the end date of ``$c2``.

   .. php:method:: endsAfter($c2)

      :param Calends\\Calends $c2: The :php:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the end date of the current :php:class:`Calends` object with the
      end date of ``$c2``.

Export
------

It's possible to export :php:class:`Calends` values in a couple of ways. It
implements :php:class:`Serializable` and :php:class:`JsonSerializable`, as well
as the :php:func:`__toString` method, so the regular mechanisms for each of
those are readily available and usable. In addition, it also offers support for
JSON-decoding values directly:

   .. php:staticmethod:: jsonUnserialize($encoded)

      :param string $encoded: The JSON-encoded value to import.
      :return: A new :php:class:`Calends` object
      :rtype: :php:class:`Calends`
      :throws CalendsException: when an error occurs

Error Handling
--------------

.. php:class:: CalendsException

   A very simple exception class, directly extending :php:class:`\Exception`. It
   is thrown by the library for all encountered errors.
