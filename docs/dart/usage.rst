.. _usage-dart:

.. dart:package:: calends

.. index::
   pair: usage; Dart

Using Calends in Dart
=====================

Calends exposes a very small handful of things for use outside the library
itself. One is the :dart:class:`Calends` class, documented here, which should
be the only interface users of the library ever need to touch.

Another thing Calends exposes is the :dart:class:`TAI64Time` class, used to
store and manipulate the instants of time which make up a :dart:class:`Calends`
instance. The rest are interfaces for extending the library's functionality.
These are covered in the :ref:`Custom Calendars in Dart <custom-calendars-dart>`
section.

.. note::

   :dart:class:`Calends` objects are immutable - all methods return a new
   :dart:class:`Calends` object where they might otherwise alter the current
   one. This has the side effect of using more memory to perform manipulations
   than updating values on an existing object would. It makes many operations
   safer, though, than mutable objects would allow.

.. dart:class:: Calends

   The main entry point to Calends and its functionality.

   .. dart:method:: initialize()

      Sets up the error handling and otherwise preps the library for use. Run
      this before doing anything else!

Create
------

   .. dart:method:: Calends.(stamp, calendar, format)

      :param dynamic stamp: The timestamp to parse the date(s)/time(s) from.
      :param String calendar:
         The calendar system to parse the date(s)/time(s) with.
      :param String format:
         The format the date(s)/time(s) is/are expected to use.
      :throws CalendsException: when an error occurs

      Creates a new :dart:class:`Calends` object, using ``calendar`` to select a
      calendar system, and ``format`` to parse the contents of ``stamp`` into
      the :dart:class:`Calends` object's internal instants. The type of
      ``stamp`` can vary based on the calendar system itself, but generally
      speaking can always be a string.

      In any case, the stamp can also be a ``Map``, where the ``String`` keys
      are any two of ``start``, ``end``, and ``duration``. If all three are
      provided, ``duration`` is ignored in favor of calculating it directly.

      The calendar system then converts ``stamp`` to a pair of
      :dart:class:`TAI64Time` instants, which the :dart:class:`Calends` object
      sets to the appropriate internal value.

Read
----

   .. dart:method:: Calends.date(calendar, format)

      :param String calendar: The calendar system to format the date/time with.
      :param String format: The format the date/time is expected to be in.
      :return: The start date of the :dart:class:`Calends` object
      :rtype: string
      :throws CalendsException: when an error occurs

      Retrieves the start date of the :dart:class:`Calends` object as a string.
      The value is generated by the calendar system given in ``calendar``,
      according to the format string in ``format``.

   .. dart:method:: Calends.endDate(calendar, format)

      :param String calendar: The calendar system to format the date/time with.
      :param String format: The format the date/time is expected to be in.
      :return: The end date of the :dart:class:`Calends` object
      :rtype: string
      :throws CalendsException: when an error occurs

      Retrieves the end date of the :dart:class:`Calends` object as a string.
      The value is generated by the calendar system given in ``calendar``,
      according to the format string in ``format``.

   .. dart:method:: Calends.duration()

      :return: The duration of the :dart:class:`Calends` object
      :rtype: string

      Retrieves the duration of the :dart:class:`Calends` object as a decimal
      string. This value will be ``0`` if the :dart:class:`Calends` object
      contains an instant.

Update
------

   .. dart:method:: Calends.withDate(stamp, calendar, format)

      :param dynamic stamp: The value to parse the date/time from.
      :param String calendar: The calendar system to parse the date/time with.
      :param String format: The format the date/time is expected to use.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object with a start date based on the
      current :dart:class:`Calends` object's value. The inputs are the same as
      for :dart:meth:`Calends.`, above, except the ``String`` → value map option
      isn't available, since you're already specifically setting the start value
      explicitly.

   .. dart:method:: Calends.withEndDate(value, calendar, format)

      :param dynamic stamp: The value to parse the date/time from.
      :param String calendar: The calendar system to parse the date/time with.
      :param String format: The format the date/time is expected to use.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object with an end date based on the
      current :dart:class:`Calends` object's value. The inputs are the same as
      for :dart:meth:`Calends.`, above, except the ``String`` → value map option
      isn't available, since you're already specifically setting the end value
      explicitly.

   .. dart:method:: Calends.withDuration(duration, calendar)

      :param dynamic duration: The value to parse the new duration from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object with a duration set by adjusting
      the current :dart:class:`Calends` object's end point, and using its start
      point as an anchor. The ``duration`` value is interpreted by the calendar
      system given in ``calendar``, so is subject to any of its rules.

   .. dart:method:: Calends.withDurationFromEnd(duration, calendar)

      :param dynamic duration: The value to parse the new duration from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object with a duration set by adjusting
      the current :dart:class:`Calends` object's start point, and using its end
      point as an anchor. The ``duration`` value is interpreted by the calendar
      system given in ``calendar``, so is subject to any of its rules.

Manipulate
----------

   .. dart:method:: Calends.add(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Increases the end date of the :dart:class:`Calends` object's current value
      by ``offset``, as interpreted by the calendar system given in
      ``calendar``, and returns a new :dart:class:`Calends` object with the
      result.

   .. dart:method:: Calends.addFromEnd(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Increases the start date of the :dart:class:`Calends` object's current
      value by ``offset``, as interpreted by the calendar system given in
      ``calendar``, and returns a new :dart:class:`Calends` object with the
      result.

   .. dart:method:: Calends.subtract(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Works the same as :dart:meth:`add`, except it decreases the start date,
      rather than increasing it.

   .. dart:method:: Calends.subtractFromEnd(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Works the same as :dart:meth:`addFromEnd`, except it decreases the end
      date, rather than increasing it.

   .. dart:method:: Calends.next(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object of ``offset`` duration (as
      interpreted by the calendar system given in ``calendar``), which abuts
      the current :dart:class:`Calends` object's value. If ``offset`` is empty,
      ``calendar`` is ignored, and the current object's duration is used
      instead.

   .. dart:method:: Calends.previous(offset, calendar)

      :param dynamic offset: The value to parse the offset from.
      :param String calendar: The calendar system to parse the date/time with.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object of ``offset`` duration (as
      interpreted by the calendar system given in ``calendar``), which abuts
      the current :dart:class:`Calends` object's value. If ``offset`` is empty,
      ``calendar`` is ignored, and the current object's duration is used
      instead.

Combine
-------

   .. dart:method:: Calends.merge(c2)

      :param Calends c2: The :dart:class:`Calends` object to merge.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object spanning from the earliest start
      date to the latest end date between the current :dart:class:`Calends`
      object and ``c2``.

   .. dart:method:: Calends.intersect(c2)

      :param Calends c2: The :dart:class:`Calends` object to intersect.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object spanning the overlap between the
      current :dart:class:`Calends` object and ``c2``. If the current object and
      ``c2`` don't overlap, throws an error.

   .. dart:method:: Calends.gap(c2)

      :param Calends c2: The :dart:class:`Calends` object to gap.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

      Returns a :dart:class:`Calends` object spanning the gap between the
      current :dart:class:`Calends` object and ``c2``. If the current object and
      ``c2`` overlap (and there is, therefore, no gap to return), throws an
      error.

Compare
-------

   .. dart:method:: Calends.difference(c2, mode)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :param String mode: The comparison mode.
      :return: The difference, as a decimal string
      :rtype: string

      Returns the difference of the current :dart:class:`Calends` object minus
      ``c2``, using ``mode`` to select which values to use in the calculation.
      Valid ``mode``\ s include:

      - ``start`` - use the start date of both the current object and ``c2``
      - ``duration`` - use the duration of both the current object and ``c2``
      - ``end`` - use the end date of both the current object and ``c2``
      - ``start-end`` - use the start of the current object, and the end of
        ``c2``
      - ``end-start`` - use the end of the current object, and the start of
        ``c2``

   .. dart:method:: Calends.compare(c2, mode)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :param String mode: The comparison mode.
      :return: A standard comparison result
      :rtype: int

      Returns ``-1`` if the current :dart:class:`Calends` object is less than
      ``c2``, ``0`` if they are equal, and ``1`` if the current object is
      greater than ``c2``, using ``mode`` to select which values to use in the
      comparison. Valid ``mode``\ s are the same as for :dart:meth:`difference`,
      above.

   .. dart:method:: Calends.contains(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :dart:class:`Calends` object contains all of
      ``c2``.

   .. dart:method:: Calends.overlaps(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :dart:class:`Calends` object overlaps with
      ``c2``.

   .. dart:method:: Calends.abuts(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :dart:class:`Calends` object abuts ``c2`` (that
      is, whether one begins at the same instant the other ends).

   .. dart:method:: Calends.isSame(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the current :dart:class:`Calends` object covers the same
      span of time as ``c2``. Also available via the ``==`` operator.

   .. dart:method:: Calends.isShorter(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :dart:class:`Calends` object  and
      ``c2``.

   .. dart:method:: Calends.isSameDuration(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :dart:class:`Calends` object  and
      ``c2``.

   .. dart:method:: Calends.isLonger(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the duration of the current :dart:class:`Calends` object  and
      ``c2``.

   .. dart:method:: Calends.isBefore(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the entirety of the current :dart:class:`Calends` object with the
      start date of ``c2``. Also available as the ``<`` operator.

   .. dart:method:: Calends.startsBefore(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the start date of the current :dart:class:`Calends` object with
      the start date of ``c2``.

   .. dart:method:: Calends.endsBefore(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the end date of the current :dart:class:`Calends` object with the
      start date of ``c2``.

   .. dart:method:: Calends.isDuring(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the entirety of the current :dart:class:`Calends` object
      lies between the start and end dates of ``c2``.

   .. dart:method:: Calends.startsDuring(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the start date of the current :dart:class:`Calends` object
      lies between the start and end dates of ``c2``.

   .. dart:method:: Calends.endsDuring(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Checks whether the end date of the current :dart:class:`Calends` object
      lies between the start and end dates of ``c2``.

   .. dart:method:: Calends.isAfter(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the entirety of the current :dart:class:`Calends` object with the
      end date of ``c2``. Also available as the ``>`` operator.

   .. dart:method:: Calends.startsAfter(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the start date of the current :dart:class:`Calends` object with
      the end date of ``c2``.

   .. dart:method:: Calends.endsAfter(c2)

      :param Calends c2: The :dart:class:`Calends` object to compare.
      :return: The result of the comparison
      :rtype: bool

      Compares the end date of the current :dart:class:`Calends` object with the
      end date of ``c2``.

Export
------

It's possible to export :dart:class:`Calends` values in a couple of ways, and
then re-import them later/elsewhere. The text encoding is the less portable
option, though, so we strongly recommend using JSON instead.

   .. dart:method:: Calends.encodeText()

      :return: The text-encoded value of the :dart:class:`Calends` instance.
      :rtype: ``String``
      :throws CalendsException: when an error occurs

   .. dart:method:: Calends.decodeText(encoded)

      :param String encoded: The text-encoded value to import.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

   .. dart:method:: Calends.encodeJson()

      :return: The JSON-encoded value of the :dart:class:`Calends` instance.
      :rtype: ``String``
      :throws CalendsException: when an error occurs

   .. dart:method:: Calends.decodeJson(encoded)

      :param String encoded: The JSON-encoded value to import.
      :return: A new :dart:class:`Calends` object
      :rtype: :dart:class:`Calends`
      :throws CalendsException: when an error occurs

If you just need a ``String`` value for display purposes, and can't use the
:dart:meth:`date` method to format it to a given calendar system, there is a
fallback mechanism in the form of the :dart:meth:`toString` method. This value
is neither human-readable nor machine-importable, so it should only be used for
debugging.

   .. dart:method:: Calends.toString()

      :return: A non-portable representation of the :dart:class:`Calends`
               instance.
      :rtype: ``String``
      :throws CalendsException: when an error occurs

Error Handling
--------------

.. dart:class:: CalendsException

   A very simple exception class, directly extending :dart:class:`Exception`.
   It is thrown by the library for all encountered errors.
