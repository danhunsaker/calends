name: CI (Test/Build/Release)

on:
  - push
  - pull_request

env:
  GO111MODULE: on

jobs:
  test:
    name: "Tests: Go ${{ matrix.go }}/Dart ${{ matrix.dart }}/Node ${{ matrix.node }}/PHP ${{ matrix.php }} on ${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        go:
          - '1.19'
          - '1.18'
          - '1.17'
        dart:
          - stable
        node:
          - 18
          - 16
        php:
          - '8.2'
          - '8.1'
          - '8.0'
          - '7.4'
        include:
          - os: ubuntu-latest
            ext: so
          - os: windows-latest
            ext: dll
          - os: macos-latest
            ext: dylib
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart }}

      - name: Setup Node
        if: ${{ matrix.go == '1.19' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        id: php
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          extensions: ffi
        env:
          update: true

      - name: Local Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' && github.actor == 'nektos/act' }}
        run: |
          apt-get update
          apt-get install -y wget

      - name: Run Go tests (Not Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: ./tests/go.sh

      - name: Run Go tests (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: pwsh ./tests/go.ps1

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.txt

      - name: Test building libcalends
        run: go build -v -o libcalends.${{ matrix.ext }} -buildmode=c-shared ./libcalends

      - name: Test building cli
        run: go build -v -o calends.out ./cli

      - name: Test building WASM
        if: ${{ matrix.go == '1.19' }}
        run: go build -v -o calends.wasm ./wasm
        env:
          GOOS: js
          GOARCH: wasm

      - name: Test Dart wrapper
        run: |
          cp libcalends.${{ matrix.ext }} libcalends/dart/
          cd libcalends/dart
          dart pub get
          dart test

      - name: Test WASM via JS wrapper
        if: ${{ matrix.go == '1.19' }}
        run: |
          cp calends.wasm wasm/js/
          cd wasm/js
          npm ci
          npm test

      - name: Test PHP wrapper (Not Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: ./tests/php.sh ${{ steps.php.outputs.php-version }} ${{ matrix.ext }}

      - name: Test PHP wrapper (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: pwsh ./tests/php.ps1 ${{ steps.php.outputs.php-version }} ${{ matrix.ext }}

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: Build binaries
        run: ./build-all

      - name: Upload binaries as assets
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/*

      - name: Release binaries
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            dist/bin/*
