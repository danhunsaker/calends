// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for a library for handling dates and times across arbitrary calendar systems
class CalendsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CalendsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CalendsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void calendar_register(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> defaultFormat,
    Calends_calendar_to_internal_string toInternalString,
    Calends_calendar_to_internal_long_long toInternalLongLong,
    Calends_calendar_to_internal_double toInternalDouble,
    Calends_calendar_to_internal_tai toInternalTai,
    Calends_calendar_from_internal fromInternal,
    Calends_calendar_offset_string offsetString,
    Calends_calendar_offset_long_long offsetLongLong,
    Calends_calendar_offset_double offsetDouble,
    Calends_calendar_offset_tai offsetTai,
  ) {
    return _calendar_register(
      name,
      defaultFormat,
      toInternalString,
      toInternalLongLong,
      toInternalDouble,
      toInternalTai,
      fromInternal,
      offsetString,
      offsetLongLong,
      offsetDouble,
      offsetTai,
    );
  }

  late final _calendar_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              Calends_calendar_to_internal_string,
              Calends_calendar_to_internal_long_long,
              Calends_calendar_to_internal_double,
              Calends_calendar_to_internal_tai,
              Calends_calendar_from_internal,
              Calends_calendar_offset_string,
              Calends_calendar_offset_long_long,
              Calends_calendar_offset_double,
              Calends_calendar_offset_tai)>>('Calends_calendar_register');
  late final _calendar_register = _calendar_registerPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          Calends_calendar_to_internal_string,
          Calends_calendar_to_internal_long_long,
          Calends_calendar_to_internal_double,
          Calends_calendar_to_internal_tai,
          Calends_calendar_from_internal,
          Calends_calendar_offset_string,
          Calends_calendar_offset_long_long,
          Calends_calendar_offset_double,
          Calends_calendar_offset_tai)>();

  void calendar_unregister(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _calendar_unregister(
      name,
    );
  }

  late final _calendar_unregisterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Calends_calendar_unregister');
  late final _calendar_unregister = _calendar_unregisterPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int calendar_registered(
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _calendar_registered(
      calendar,
    );
  }

  late final _calendar_registeredPtr =
      _lookup<ffi.NativeFunction<GoUint8 Function(ffi.Pointer<ffi.Char>)>>(
          'Calends_calendar_registered');
  late final _calendar_registered =
      _calendar_registeredPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> calendar_list_registered() {
    return _calendar_list_registered();
  }

  late final _calendar_list_registeredPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Calends_calendar_list_registered');
  late final _calendar_list_registered = _calendar_list_registeredPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  TAI64Time TAI64Time_add(
    TAI64Time t,
    TAI64Time z,
  ) {
    return _TAI64Time_add(
      t,
      z,
    );
  }

  late final _TAI64Time_addPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(TAI64Time, TAI64Time)>>(
          'TAI64Time_add');
  late final _TAI64Time_add =
      _TAI64Time_addPtr.asFunction<TAI64Time Function(TAI64Time, TAI64Time)>();

  TAI64Time TAI64Time_sub(
    TAI64Time t,
    TAI64Time z,
  ) {
    return _TAI64Time_sub(
      t,
      z,
    );
  }

  late final _TAI64Time_subPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(TAI64Time, TAI64Time)>>(
          'TAI64Time_sub');
  late final _TAI64Time_sub =
      _TAI64Time_subPtr.asFunction<TAI64Time Function(TAI64Time, TAI64Time)>();

  ffi.Pointer<ffi.Char> TAI64Time_string(
    TAI64Time t,
  ) {
    return _TAI64Time_string(
      t,
    );
  }

  late final _TAI64Time_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TAI64Time)>>(
          'TAI64Time_string');
  late final _TAI64Time_string = _TAI64Time_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(TAI64Time)>();

  TAI64Time TAI64Time_from_string(
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _TAI64Time_from_string(
      in1,
    );
  }

  late final _TAI64Time_from_stringPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(ffi.Pointer<ffi.Char>)>>(
          'TAI64Time_from_string');
  late final _TAI64Time_from_string = _TAI64Time_from_stringPtr.asFunction<
      TAI64Time Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TAI64Time_hex_string(
    TAI64Time t,
  ) {
    return _TAI64Time_hex_string(
      t,
    );
  }

  late final _TAI64Time_hex_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TAI64Time)>>(
          'TAI64Time_hex_string');
  late final _TAI64Time_hex_string = _TAI64Time_hex_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(TAI64Time)>();

  TAI64Time TAI64Time_from_hex_string(
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _TAI64Time_from_hex_string(
      in1,
    );
  }

  late final _TAI64Time_from_hex_stringPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(ffi.Pointer<ffi.Char>)>>(
          'TAI64Time_from_hex_string');
  late final _TAI64Time_from_hex_string = _TAI64Time_from_hex_stringPtr
      .asFunction<TAI64Time Function(ffi.Pointer<ffi.Char>)>();

  double TAI64Time_double(
    TAI64Time t,
  ) {
    return _TAI64Time_double(
      t,
    );
  }

  late final _TAI64Time_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(TAI64Time)>>(
          'TAI64Time_double');
  late final _TAI64Time_double =
      _TAI64Time_doublePtr.asFunction<double Function(TAI64Time)>();

  TAI64Time TAI64Time_from_double(
    double in1,
  ) {
    return _TAI64Time_from_double(
      in1,
    );
  }

  late final _TAI64Time_from_doublePtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(ffi.Double)>>(
          'TAI64Time_from_double');
  late final _TAI64Time_from_double =
      _TAI64Time_from_doublePtr.asFunction<TAI64Time Function(double)>();

  ffi.Pointer<ffi.Char> TAI64Time_encode_text(
    TAI64Time t,
  ) {
    return _TAI64Time_encode_text(
      t,
    );
  }

  late final _TAI64Time_encode_textPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TAI64Time)>>(
          'TAI64Time_encode_text');
  late final _TAI64Time_encode_text = _TAI64Time_encode_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(TAI64Time)>();

  TAI64Time TAI64Time_decode_text(
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _TAI64Time_decode_text(
      in1,
    );
  }

  late final _TAI64Time_decode_textPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(ffi.Pointer<ffi.Char>)>>(
          'TAI64Time_decode_text');
  late final _TAI64Time_decode_text = _TAI64Time_decode_textPtr.asFunction<
      TAI64Time Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> TAI64Time_encode_binary(
    TAI64Time t,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _TAI64Time_encode_binary(
      t,
      length,
    );
  }

  late final _TAI64Time_encode_binaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              TAI64Time, ffi.Pointer<ffi.Int>)>>('TAI64Time_encode_binary');
  late final _TAI64Time_encode_binary = _TAI64Time_encode_binaryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(TAI64Time, ffi.Pointer<ffi.Int>)>();

  TAI64Time TAI64Time_decode_binary(
    ffi.Pointer<ffi.Void> in1,
    int len,
  ) {
    return _TAI64Time_decode_binary(
      in1,
      len,
    );
  }

  late final _TAI64Time_decode_binaryPtr = _lookup<
      ffi.NativeFunction<
          TAI64Time Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('TAI64Time_decode_binary');
  late final _TAI64Time_decode_binary = _TAI64Time_decode_binaryPtr.asFunction<
      TAI64Time Function(ffi.Pointer<ffi.Void>, int)>();

  TAI64Time TAI64Time_utc_to_tai(
    TAI64Time utc,
  ) {
    return _TAI64Time_utc_to_tai(
      utc,
    );
  }

  late final _TAI64Time_utc_to_taiPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(TAI64Time)>>(
          'TAI64Time_utc_to_tai');
  late final _TAI64Time_utc_to_tai =
      _TAI64Time_utc_to_taiPtr.asFunction<TAI64Time Function(TAI64Time)>();

  TAI64Time TAI64Time_tai_to_utc(
    TAI64Time tai,
  ) {
    return _TAI64Time_tai_to_utc(
      tai,
    );
  }

  late final _TAI64Time_tai_to_utcPtr =
      _lookup<ffi.NativeFunction<TAI64Time Function(TAI64Time)>>(
          'TAI64Time_tai_to_utc');
  late final _TAI64Time_tai_to_utc =
      _TAI64Time_tai_to_utcPtr.asFunction<TAI64Time Function(TAI64Time)>();

  void release(
    int p,
  ) {
    return _release(
      p,
    );
  }

  late final _releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLongLong)>>(
          'Calends_release');
  late final _release = _releasePtr.asFunction<void Function(int)>();

  int create_string(
    ffi.Pointer<ffi.Char> stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_string(
      stamp,
      calendar,
      format,
    );
  }

  late final _create_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_string');
  late final _create_string = _create_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int create_string_range(
    ffi.Pointer<ffi.Char> start,
    ffi.Pointer<ffi.Char> end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_string_range(
      start,
      end,
      calendar,
      format,
    );
  }

  late final _create_string_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_string_range');
  late final _create_string_range = _create_string_rangePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_string_start_period(
    ffi.Pointer<ffi.Char> start,
    ffi.Pointer<ffi.Char> duration,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_string_start_period(
      start,
      duration,
      calendar,
      format,
    );
  }

  late final _create_string_start_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_string_start_period');
  late final _create_string_start_period =
      _create_string_start_periodPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_string_end_period(
    ffi.Pointer<ffi.Char> duration,
    ffi.Pointer<ffi.Char> end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_string_end_period(
      duration,
      end,
      calendar,
      format,
    );
  }

  late final _create_string_end_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_string_end_period');
  late final _create_string_end_period =
      _create_string_end_periodPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_long_long(
    int stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_long_long(
      stamp,
      calendar,
      format,
    );
  }

  late final _create_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.LongLong, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_long_long');
  late final _create_long_long = _create_long_longPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_long_long_range(
    int start,
    int end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_long_long_range(
      start,
      end,
      calendar,
      format,
    );
  }

  late final _create_long_long_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_long_long_range');
  late final _create_long_long_range = _create_long_long_rangePtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_long_long_start_period(
    int start,
    int duration,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_long_long_start_period(
      start,
      duration,
      calendar,
      format,
    );
  }

  late final _create_long_long_start_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_long_long_start_period');
  late final _create_long_long_start_period =
      _create_long_long_start_periodPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_long_long_end_period(
    int duration,
    int end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_long_long_end_period(
      duration,
      end,
      calendar,
      format,
    );
  }

  late final _create_long_long_end_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_long_long_end_period');
  late final _create_long_long_end_period =
      _create_long_long_end_periodPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_double(
    double stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_double(
      stamp,
      calendar,
      format,
    );
  }

  late final _create_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Double, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_double');
  late final _create_double = _create_doublePtr.asFunction<
      int Function(double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_double_range(
    double start,
    double end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_double_range(
      start,
      end,
      calendar,
      format,
    );
  }

  late final _create_double_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_double_range');
  late final _create_double_range = _create_double_rangePtr.asFunction<
      int Function(
          double, double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_double_start_period(
    double start,
    double duration,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_double_start_period(
      start,
      duration,
      calendar,
      format,
    );
  }

  late final _create_double_start_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_double_start_period');
  late final _create_double_start_period =
      _create_double_start_periodPtr.asFunction<
          int Function(
              double, double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int create_double_end_period(
    double duration,
    double end,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _create_double_end_period(
      duration,
      end,
      calendar,
      format,
    );
  }

  late final _create_double_end_periodPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_create_double_end_period');
  late final _create_double_end_period =
      _create_double_end_periodPtr.asFunction<
          int Function(
              double, double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> date(
    int p,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _date(
      p,
      calendar,
      format,
    );
  }

  late final _datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('Calends_date');
  late final _date = _datePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> duration(
    int p,
  ) {
    return _duration(
      p,
    );
  }

  late final _durationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong)>>('Calends_duration');
  late final _duration =
      _durationPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> end_date(
    int p,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _end_date(
      p,
      calendar,
      format,
    );
  }

  late final _end_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_end_date');
  late final _end_date = _end_datePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> string(
    int p,
  ) {
    return _string(
      p,
    );
  }

  late final _stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong)>>('Calends_string');
  late final _string =
      _stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> encode_text(
    int p,
  ) {
    return _encode_text(
      p,
    );
  }

  late final _encode_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong)>>('Calends_encode_text');
  late final _encode_text =
      _encode_textPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int decode_text(
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _decode_text(
      in1,
    );
  }

  late final _decode_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>)>>('Calends_decode_text');
  late final _decode_text =
      _decode_textPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> encode_json(
    int p,
  ) {
    return _encode_json(
      p,
    );
  }

  late final _encode_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong)>>('Calends_encode_json');
  late final _encode_json =
      _encode_jsonPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int decode_json(
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _decode_json(
      in1,
    );
  }

  late final _decode_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>)>>('Calends_decode_json');
  late final _decode_json =
      _decode_jsonPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void register_panic_handler(
    Calends_panic_handler handler,
  ) {
    return _register_panic_handler(
      handler,
    );
  }

  late final _register_panic_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Calends_panic_handler)>>(
          'Calends_register_panic_handler');
  late final _register_panic_handler = _register_panic_handlerPtr
      .asFunction<void Function(Calends_panic_handler)>();

  ffi.Pointer<ffi.Char> difference(
    int p1,
    int p2,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _difference(
      p1,
      p2,
      mode,
    );
  }

  late final _differencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLongLong,
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_difference');
  late final _difference = _differencePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>)>();

  int compare(
    int p1,
    int p2,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _compare(
      p1,
      p2,
      mode,
    );
  }

  late final _comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.SignedChar Function(ffi.UnsignedLongLong, ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_compare');
  late final _compare =
      _comparePtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int is_same(
    int p1,
    int p2,
  ) {
    return _is_same(
      p1,
      p2,
    );
  }

  late final _is_samePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_is_same');
  late final _is_same = _is_samePtr.asFunction<int Function(int, int)>();

  int is_same_duration(
    int p1,
    int p2,
  ) {
    return _is_same_duration(
      p1,
      p2,
    );
  }

  late final _is_same_durationPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_is_same_duration');
  late final _is_same_duration =
      _is_same_durationPtr.asFunction<int Function(int, int)>();

  int is_shorter(
    int p1,
    int p2,
  ) {
    return _is_shorter(
      p1,
      p2,
    );
  }

  late final _is_shorterPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_is_shorter');
  late final _is_shorter = _is_shorterPtr.asFunction<int Function(int, int)>();

  int is_longer(
    int p1,
    int p2,
  ) {
    return _is_longer(
      p1,
      p2,
    );
  }

  late final _is_longerPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_is_longer');
  late final _is_longer = _is_longerPtr.asFunction<int Function(int, int)>();

  int contains(
    int p1,
    int p2,
  ) {
    return _contains(
      p1,
      p2,
    );
  }

  late final _containsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_contains');
  late final _contains = _containsPtr.asFunction<int Function(int, int)>();

  int overlaps(
    int p1,
    int p2,
  ) {
    return _overlaps(
      p1,
      p2,
    );
  }

  late final _overlapsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_overlaps');
  late final _overlaps = _overlapsPtr.asFunction<int Function(int, int)>();

  int abuts(
    int p1,
    int p2,
  ) {
    return _abuts(
      p1,
      p2,
    );
  }

  late final _abutsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_abuts');
  late final _abuts = _abutsPtr.asFunction<int Function(int, int)>();

  int is_before(
    int p1,
    int p2,
  ) {
    return _is_before(
      p1,
      p2,
    );
  }

  late final _is_beforePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_is_before');
  late final _is_before = _is_beforePtr.asFunction<int Function(int, int)>();

  int starts_before(
    int p1,
    int p2,
  ) {
    return _starts_before(
      p1,
      p2,
    );
  }

  late final _starts_beforePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_starts_before');
  late final _starts_before =
      _starts_beforePtr.asFunction<int Function(int, int)>();

  int ends_before(
    int p1,
    int p2,
  ) {
    return _ends_before(
      p1,
      p2,
    );
  }

  late final _ends_beforePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_ends_before');
  late final _ends_before =
      _ends_beforePtr.asFunction<int Function(int, int)>();

  int is_during(
    int p1,
    int p2,
  ) {
    return _is_during(
      p1,
      p2,
    );
  }

  late final _is_duringPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_is_during');
  late final _is_during = _is_duringPtr.asFunction<int Function(int, int)>();

  int starts_during(
    int p1,
    int p2,
  ) {
    return _starts_during(
      p1,
      p2,
    );
  }

  late final _starts_duringPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_starts_during');
  late final _starts_during =
      _starts_duringPtr.asFunction<int Function(int, int)>();

  int ends_during(
    int p1,
    int p2,
  ) {
    return _ends_during(
      p1,
      p2,
    );
  }

  late final _ends_duringPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_ends_during');
  late final _ends_during =
      _ends_duringPtr.asFunction<int Function(int, int)>();

  int is_after(
    int p1,
    int p2,
  ) {
    return _is_after(
      p1,
      p2,
    );
  }

  late final _is_afterPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_is_after');
  late final _is_after = _is_afterPtr.asFunction<int Function(int, int)>();

  int starts_after(
    int p1,
    int p2,
  ) {
    return _starts_after(
      p1,
      p2,
    );
  }

  late final _starts_afterPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_starts_after');
  late final _starts_after =
      _starts_afterPtr.asFunction<int Function(int, int)>();

  int ends_after(
    int p1,
    int p2,
  ) {
    return _ends_after(
      p1,
      p2,
    );
  }

  late final _ends_afterPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_ends_after');
  late final _ends_after = _ends_afterPtr.asFunction<int Function(int, int)>();

  int add_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_string(
      p,
      offset,
      calendar,
    );
  }

  late final _add_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_add_string');
  late final _add_string = _add_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int add_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _add_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_add_long_long');
  late final _add_long_long = _add_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int add_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_double(
      p,
      offset,
      calendar,
    );
  }

  late final _add_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_add_double');
  late final _add_double = _add_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int subtract_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_string(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_string');
  late final _subtract_string = _subtract_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int subtract_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_long_long');
  late final _subtract_long_long = _subtract_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int subtract_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_double(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_double');
  late final _subtract_double = _subtract_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int add_from_end_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_from_end_string(
      p,
      offset,
      calendar,
    );
  }

  late final _add_from_end_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_add_from_end_string');
  late final _add_from_end_string = _add_from_end_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int add_from_end_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_from_end_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _add_from_end_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_add_from_end_long_long');
  late final _add_from_end_long_long = _add_from_end_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int add_from_end_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _add_from_end_double(
      p,
      offset,
      calendar,
    );
  }

  late final _add_from_end_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_add_from_end_double');
  late final _add_from_end_double = _add_from_end_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int subtract_from_end_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_from_end_string(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_from_end_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_from_end_string');
  late final _subtract_from_end_string =
      _subtract_from_end_stringPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int subtract_from_end_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_from_end_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_from_end_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_from_end_long_long');
  late final _subtract_from_end_long_long = _subtract_from_end_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int subtract_from_end_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _subtract_from_end_double(
      p,
      offset,
      calendar,
    );
  }

  late final _subtract_from_end_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_subtract_from_end_double');
  late final _subtract_from_end_double = _subtract_from_end_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int next_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _next_string(
      p,
      offset,
      calendar,
    );
  }

  late final _next_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_next_string');
  late final _next_string = _next_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int next_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _next_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _next_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_next_long_long');
  late final _next_long_long = _next_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int next_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _next_double(
      p,
      offset,
      calendar,
    );
  }

  late final _next_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_next_double');
  late final _next_double = _next_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int previous_string(
    int p,
    ffi.Pointer<ffi.Char> offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _previous_string(
      p,
      offset,
      calendar,
    );
  }

  late final _previous_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_previous_string');
  late final _previous_string = _previous_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int previous_long_long(
    int p,
    int offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _previous_long_long(
      p,
      offset,
      calendar,
    );
  }

  late final _previous_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_previous_long_long');
  late final _previous_long_long = _previous_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int previous_double(
    int p,
    double offset,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _previous_double(
      p,
      offset,
      calendar,
    );
  }

  late final _previous_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_previous_double');
  late final _previous_double = _previous_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int with_date_string(
    int p,
    ffi.Pointer<ffi.Char> stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_date_string(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_date_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_date_string');
  late final _with_date_string = _with_date_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int with_date_long_long(
    int p,
    int stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_date_long_long(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_date_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_date_long_long');
  late final _with_date_long_long = _with_date_long_longPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_date_double(
    int p,
    double stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_date_double(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_date_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_date_double');
  late final _with_date_double = _with_date_doublePtr.asFunction<
      int Function(
          int, double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_end_date_string(
    int p,
    ffi.Pointer<ffi.Char> stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_end_date_string(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_end_date_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_end_date_string');
  late final _with_end_date_string = _with_end_date_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int with_end_date_long_long(
    int p,
    int stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_end_date_long_long(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_end_date_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_end_date_long_long');
  late final _with_end_date_long_long = _with_end_date_long_longPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_end_date_double(
    int p,
    double stamp,
    ffi.Pointer<ffi.Char> calendar,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _with_end_date_double(
      p,
      stamp,
      calendar,
      format,
    );
  }

  late final _with_end_date_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_end_date_double');
  late final _with_end_date_double = _with_end_date_doublePtr.asFunction<
      int Function(
          int, double, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_duration_string(
    int p,
    ffi.Pointer<ffi.Char> duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_string(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_duration_string');
  late final _with_duration_string = _with_duration_stringPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_duration_long_long(
    int p,
    int duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_long_long(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_long_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.LongLong,
              ffi.Pointer<ffi.Char>)>>('Calends_with_duration_long_long');
  late final _with_duration_long_long = _with_duration_long_longPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int with_duration_double(
    int p,
    double duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_double(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_with_duration_double');
  late final _with_duration_double = _with_duration_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int with_duration_from_end_string(
    int p,
    ffi.Pointer<ffi.Char> duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_from_end_string(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_from_end_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Calends_with_duration_from_end_string');
  late final _with_duration_from_end_string =
      _with_duration_from_end_stringPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int with_duration_from_end_long_long(
    int p,
    int duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_from_end_long_long(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_from_end_long_longPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLongLong Function(
                  ffi.UnsignedLongLong, ffi.LongLong, ffi.Pointer<ffi.Char>)>>(
      'Calends_with_duration_from_end_long_long');
  late final _with_duration_from_end_long_long =
      _with_duration_from_end_long_longPtr
          .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int with_duration_from_end_double(
    int p,
    double duration,
    ffi.Pointer<ffi.Char> calendar,
  ) {
    return _with_duration_from_end_double(
      p,
      duration,
      calendar,
    );
  }

  late final _with_duration_from_end_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong, ffi.Double,
              ffi.Pointer<ffi.Char>)>>('Calends_with_duration_from_end_double');
  late final _with_duration_from_end_double = _with_duration_from_end_doublePtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Char>)>();

  int merge(
    int p1,
    int p2,
  ) {
    return _merge(
      p1,
      p2,
    );
  }

  late final _mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_merge');
  late final _merge = _mergePtr.asFunction<int Function(int, int)>();

  int intersect(
    int p1,
    int p2,
  ) {
    return _intersect(
      p1,
      p2,
    );
  }

  late final _intersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.UnsignedLongLong,
              ffi.UnsignedLongLong)>>('Calends_intersect');
  late final _intersect = _intersectPtr.asFunction<int Function(int, int)>();

  int gap(
    int p1,
    int p2,
  ) {
    return _gap(
      p1,
      p2,
    );
  }

  late final _gapPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.UnsignedLongLong)>>('Calends_gap');
  late final _gap = _gapPtr.asFunction<int Function(int, int)>();
}

class max_align_t extends ffi.Opaque {}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Long;

class _TAI64Time extends ffi.Struct {
  @ffi.LongLong()
  external int Seconds;

  @ffi.UnsignedInt()
  external int Nano;

  @ffi.UnsignedInt()
  external int Atto;

  @ffi.UnsignedInt()
  external int Ronto;

  @ffi.UnsignedInt()
  external int Udecto;

  @ffi.UnsignedInt()
  external int Xindecto;

  @ffi.UnsignedInt()
  external int padding;
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef Calends_calendar_to_internal_string = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>>;
typedef TAI64Time = _TAI64Time;
typedef Calends_calendar_to_internal_long_long = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(
            ffi.Pointer<ffi.Char>, ffi.LongLong, ffi.Pointer<ffi.Char>)>>;
typedef Calends_calendar_to_internal_double = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(
            ffi.Pointer<ffi.Char>, ffi.Double, ffi.Pointer<ffi.Char>)>>;
typedef Calends_calendar_to_internal_tai = ffi.Pointer<
    ffi.NativeFunction<TAI64Time Function(ffi.Pointer<ffi.Char>, TAI64Time)>>;
typedef Calends_calendar_from_internal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, TAI64Time, ffi.Pointer<ffi.Char>)>>;
typedef Calends_calendar_offset_string = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(
            ffi.Pointer<ffi.Char>, TAI64Time, ffi.Pointer<ffi.Char>)>>;
typedef Calends_calendar_offset_long_long = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(ffi.Pointer<ffi.Char>, TAI64Time, ffi.LongLong)>>;
typedef Calends_calendar_offset_double = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(ffi.Pointer<ffi.Char>, TAI64Time, ffi.Double)>>;
typedef Calends_calendar_offset_tai = ffi.Pointer<
    ffi.NativeFunction<
        TAI64Time Function(ffi.Pointer<ffi.Char>, TAI64Time, TAI64Time)>>;
typedef GoUint8 = ffi.UnsignedChar;
typedef Calends_panic_handler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>;

const int NULL = 0;
